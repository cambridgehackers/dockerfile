# -*- python -*-
# ex: set syntax=python:

import re
import buildbot
import json

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

projects = json.load(open('projects.json'))

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
slaveNames = []
c['slaves'] = []
for w in ['xg10']:
    slaveName = "worker-%s" % w
    slaveNames.append(slaveName)
    c['slaves'].append(BuildSlave(slaveName, "xbsv-rules-atomically",
                                  max_builds=1 if w in ['sj6', 'sj7', 'sj9'] else 3,
                                  notify_on_missing='jamey.hicks@qrclab.com'
                                  ))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### BUILD LOCKS

from buildbot import locks
platform_locks={}
platform_locks['bluesim'] = locks.MasterLock("bluesim")
platform_locks['zedboard'] = locks.MasterLock("zedboard")
platform_locks['vc707'] = locks.MasterLock("vc707")
platform_locks['kc705'] = locks.MasterLock("kc705")
maxCountForSlave={}
for worker in slaveNames:
    maxCountForSlave[worker] = 2

vivado_build_lock = locks.SlaveLock("vivado_builds",
                                    maxCount = 1,
                                    maxCountForSlave = maxCountForSlave)
cache_locks={}


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
#from buildbot.steps.source.gerrit import Gerrit
from buildbot.steps.slave import RemoveDirectory, MakeDirectory
from buildbot.process.properties import Property, Interpolate
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import DirectoryUpload

from buildbot.config import BuilderConfig
from buildbot.process.builder import enforceChosenSlave

c['builders'] = []

############################################################

import os, sys

unsupported_config = {}
unsupported_config['examples/memwrite_4m'] = ['vc707', 'kc705']
unsupported_config['examples/memread_4m'] = ['vc707', 'kc705']
unsupported_config['examples/hdmidisplay'] = ['vc707', 'kc705', 'bluesim']
unsupported_config['examples/testmm'] = ['zedboard']
unsupported_config['tests/testmm2.2.2'] = ['vc707']
unsupported_config['tests/testmm4.4.2'] = ['vc707', 'zedboard']
unsupported_config['tests/testmm4.4.4'] = ['zedboard'] # zynq only supports 64-bit access
unsupported_config['tests/testmm8.8.2'] = ['zedboard','vc707'] # too big, crashes
unsupported_config['tests/testmm8.8.4'] = ['zedboard', 'zc706'] # too big
unsupported_config['tests/testmm16.16.2'] = ['zedboard', 'bluesim'] # too big
unsupported_config['tests/testrbm2.2.2'] = ['vc707', 'zedboard']
## 64bit databus only
unsupported_config['tests/memread_manyclients128'] = ['zedboard', 'bluesim']
unsupported_config['tests/memwrite_manyclients128'] = ['zedboard', 'bluesim']

testnames = ['simple', 'echo']
testnames = [str(k) for k in projects.keys()]
archnames = ['bluesim']

additional_repos = {}
for testname in testnames:
    if not testname in additional_repos:
        additional_repos[testname] = []
    pass

for archname in archnames:
    additional_repos[archname] = []
    pass

runparam={}
runparam['vc707'] = ['sj10']
runparam['kc705'] = ['sj7']
runparam['zedboard'] = ['172.17.1.185']
runparam['zc706'] = ['172.18.0.232']

builderNames=[]

def getRunEnv():
    bluespecversion = 'Bluespec-2013.09.beta1'
    bluespecversion = 'Bluespec-2014.05.beta1'
    path=os.environ['PATH']
    path='/usr/bin:' + path # make sure system python is ahead of sandbox python
    path=('/scratch/bluespec/%s/bin:' % bluespecversion) + path
    path='/scratch/arm-2009q1/bin:/scratch/android-ndk-r9d:' + path
    path='/scratch/android-sdk-linux/platform-tools:' + path
    path='/scratch/buildbot/buildbot-xbsv-config/bin:' + path
    path='/scratch/buildbot/xbsv/scripts:' + path

    runenv={
        'PATH': path,
        'LM_LICENSE_FILE': '1709@chastity.csail.mit.edu',
        'BLUESPECDIR': '/scratch/bluespec/%s/lib' % bluespecversion,
        'USE_FPGAMAKE': '1',
        'USE_BUILDCACHE': '1',
        'BUILDCACHE_VERBOSE': '1',
	'BUILDCACHE_CACHEDIR': '/scratch/buildbot/buildcache',
        'ANDROID_ADB_SERVER_PORT': '5049'
        }
    return runenv

def getLocks(archname):
    locks = []
    if platform_locks.has_key(archname):
        locks.append(platform_locks[archname].access('exclusive'))
    if archname != 'bluesim':
        locks.append(vivado_build_lock.access('counting'))
    return locks

def addBuilder(testname, archname):
    if unsupported_config.has_key(testname) and archname in unsupported_config[testname]:
        return

    repourl = str(projects[testname]['repo'])
    m = re.match('git://github.com/(.*)/(.*)', repourl)
    builder_name = "%s %s" % (testname, archname)
    if m:
        username = m.group(1)
        repo = m.group(2)
        if repo.endswith('.git'):
            repo = repo[:-4]
	repourl = 'git://github.com/%s/%s.git' % (username, repo)
	print repourl
        # builder_name = '%s:%s:%s:%s' % (testname, username, repo, archname)
	print builder_name
    else:
	print 'regexp did not match %s', repourl

    builder_name = str(builder_name.replace('_', ' '))
    builder_name = str(builder_name.replace(':', ' '))
    if projects[testname].has_key('builders'):
	projects[testname]['builders'].append(builder_name)
    else:
	projects[testname]['builders'] = [builder_name]

    if builder_name not in cache_locks:
        cache_locks[builder_name] = buildbot.locks.MasterLock(builder_name)

    runenv = getRunEnv()
    locks = getLocks(archname)

    xbsv_factory = BuildFactory()
    # check out the source
    xbsv_factory.addStep(Git(repourl=repourl,
                             mode='full', method='fresh',
                             haltOnFailure=True))

    xbsv_factory.addStep(ShellCommand(command=["make", Interpolate("IPDIR=%(prop:workdir)s/ip/"), "gen.%s" % archname],
                                      description=["gen", testname, archname],
                                      descriptionDone=["gen", testname, archname],
                                      haltOnFailure=True,
                                      timeout=600,
                                      env=runenv))
    xbsv_factory.addStep(ShellCommand(command=["make", Interpolate("IPDIR=%(prop:workdir)s/ip/"), "build.%s" % archname],
                                      description=["building", testname, archname],
                                      descriptionDone=["built", testname, archname],
                                      haltOnFailure=True,
                                      timeout=600,
                                      env=runenv))
    if archname == 'bluesim':
        xbsv_factory.addStep(ShellCommand(command=["make", Interpolate("IPDIR=%(prop:workdir)s/ip/"), "run.%s" % archname],
                                          description=["running", testname, archname],
                                          descriptionDone=["ran", testname, archname],
                                          haltOnFailure=True,
                                          timeout=600,
                                          env=runenv))
    elif projects[testname].has_key('boardaddr'):
        runenv['RUNPARAM'] = projects[testname]['boardaddr']
        xbsv_factory.addStep(ShellCommand(command=["make", Interpolate("IPDIR=%(prop:workdir)s/ip/"), "run.%s" % archname],
                                          description=["running", testname, archname],
                                          descriptionDone=["ran", testname, archname],
                                          haltOnFailure=True,
                                          timeout=600,
                                          env=runenv))

    xbsv_factory.addStep(DirectoryUpload(slavesrc="%s/bin" % archname,
                                         masterdest=Interpolate("~/master/public_html/archive/%(kw:testname)s/%(kw:archname)s/%(prop:buildnumber)s/bin",
                                                                testname=testname, archname=archname),
                                         url=Interpolate("/archive/%(kw:testname)s/%(kw:archname)s/%(prop:buildnumber)s/bin",
                                                         testname=testname, archname=archname)))



    repohttp = repourl.replace('git:', 'https:').replace('.git','')
    c['builders'].append(
        BuilderConfig(name=builder_name,
                      category=archname,
                      description='Builds %s from <a href="%s">%s</a>' % (builder_name, repohttp, repohttp),
                      slavenames=slaveNames,
                      factory=xbsv_factory,
                      canStartBuild=enforceChosenSlave))
    builderNames.append(builder_name)

for testname in testnames:
    arches = archnames
    if projects[testname].has_key('arches'):
        arches = [str(a) for a in projects[testname]['arches']]
    for archname in arches:
        addBuilder(testname, archname)

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

from buildbot.changes.gitpoller import GitPoller

repo_pollers = {}
for testname in testnames:
    p = projects[testname]
    repo = p['repo']
    branches = ['master']
    if 'branch' in p:
        branches = [p['branch']]
	p['branch'] = 'master'
    rp = {'repo': p['repo'],
	  'branches': []}
    if repo_pollers.has_key(repo):
	rp = repo_pollers[repo]
    for b in branches:
	if not b in rp['branches']:
	    rp['branches'].append(b)
    repo_pollers[repo] = rp
    print rp

for repo in repo_pollers:
    p = repo_pollers[repo]
    print repo, p
    c['change_source'].append(GitPoller(repourl=repo,
                                        branches=p['branches'], pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, BuildslaveChoiceParameter
from buildbot.changes import filter
c['schedulers'] = []

####### FORCE SCHEDULER

force_scheduler = ForceScheduler(
                            name="force",
                            builderNames=builderNames,
                            properties=[BuildslaveChoiceParameter()]
)
c['schedulers'].append(force_scheduler)

####### PROJECT SCHEDULER

for testname in testnames:
    p = projects[testname]
    bnames = projects[testname]['builders']
    print 'testname=%s %d %d' % (testname, 'branch' in p, p.has_key('branch'))
    print p
    p['branch'] = 'master'
    if p.has_key('branch'):
	print 'Added SingleBranchScheduler name=%s repository=%s branch_re=%s' % (testname, p['repo'], p['branch'])
	print 'builderNames', bnames
        scheduler = SingleBranchScheduler(name=testname,
                                          change_filter=filter.ChangeFilter(repository = p['repo'], branch_re = p['branch']),
                                          treeStableTimer=60,
                                          builderNames=bnames)
        c['schedulers'].append(scheduler)

####### COMMAND LINE SCHEDULER
# from buildbot.scheduler import Try_Userpass
# c['schedulers'].append(Try_Userpass(
#         name='try',
#         builderNames=builderNames,
#         port=5555,
#         userpass=[('xbsv','xbsv')]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from zope.interface import Attribute
from zope.interface import Interface
from zope.interface import implements
import projects
import twisted
import subprocess
import json

class SimpleGithubAuth(auth.AuthBase):
    implements(auth.IAuth)
    """Implement basic authentication against a github."""

    def __init__(self):
        self.users = {'xbsv': {'login': 'xbsv'}}
        pass

    def authenticate(self, user, passwd):
        """Check that C{user}/C{passwd} is a valid user/pass tuple."""
	if user == 'xbsv' and passwd == 'xbsv':
	    self.err = ""
	    return True
        response = subprocess.check_output(['curl', '-u', '%s:%s' % (user,passwd), 'https://api.github.com/user'])
	print response
	entry = None
	try:
            entry = json.loads(response)
	    print entry
	    print entry['login']
        except:
	    e = sys.exc_info()[0]
	    print 'exception %s' % e

        if entry and entry.has_key('login'):
            self.err = ""
            self.users[user] = entry
            return True
        self.err = "Invalid username or password"
        return False

    def getUserInfo(self, user):
        """better impl"""
	print 'getUserInfo', user
	print self.users[user]['login']
        return dict(userName=user, fullName=self.users[user]['login'], email=self.users[user]['login'] + "@github.com", groups=[user])


authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    #auth=auth.BasicAuth([("xbsv","xbsv")]),
    auth = SimpleGithubAuth(),
    cleanShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
class WebStatus(html.WebStatus):
    def __init__(self, http_port=None, distrib_port=None, allowForce=None,
                 public_html="public_html", site=None, numbuilds=20,
                 num_events=200, num_events_max=None, auth=None,
                 order_console_by_time=False, changecommentlink=None,
                 revlink=None, projects=None, repositories=None,
                 authz=None, logRotateLength=None, maxRotatedFiles=None,
                 change_hook_dialects={}, provide_feeds=None, jinja_loaders=None,
                 change_hook_auth=None):
        html.WebStatus.__init__(self, http_port, distrib_port, allowForce, public_html, site, numbuilds,
                                num_events, num_events_max, auth,
                                order_console_by_time, changecommentlink,
                                revlink, projects, repositories,
                                authz, logRotateLength, maxRotatedFiles,
                                change_hook_dialects, provide_feeds, jinja_loaders,
                                change_hook_auth)
	pass
    def setupUsualPages(self, numbuilds, num_events, num_events_max):
        twisted.python.log.msg("setupUsualPages")
        html.WebStatus.setupUsualPages(self, numbuilds, num_events, num_events_max)
        self.putChild("projects", projects.ProjectsResource())
        self.putChild("addproject", projects.AddProjectResource())

c['status'].append(WebStatus(http_port=8080, authz=authz_cfg,
                             change_hook_dialects={ 'github' : True }))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.net", nick="xbsvtest",
                             notify_events={ 'started': 1,
                                             'finished': 1
                                             },
                             channels=["xbsv-buildbot-test"]))

####### DEBUGGING

#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd")

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Connectal"
c['titleURL'] = "http://github.com/cambridgehackers/xbsv"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://sj10/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
